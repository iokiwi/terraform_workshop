#!/bin/bash

# set -x
exec > >(tee /var/log/user-data.log|logger -t user-data ) 2>&1

apt update -y
apt upgrade -y

# Install docker
apt install -y apt-transport-https ca-certificates curl software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
apt update -y
apt-cache policy docker-ce
apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-compose

# Block until external ebs volume is attached and available to be mounted
while true; do
    if lsblk | grep -q "nvme1n1"; then
        echo "nvme1n1 found in the output of lsblk. Continuing..."
        break
    else
        echo "nvme1n1 not found in the output of lsblk. Sleeping for 10 seconds..."
        sleep 10
    fi
done

# sudo mkfs.ext4 /dev/nvme1n1; then

NAMESPACE="${server_name}"

DATA_MOUNT_DIR="/mnt/data"
mkdir -p $DATA_MOUNT_DIR

WORDPRESS_INSTALL=/home/ubuntu/wordpress
LETSENCRYPT_DATA=$DATA_MOUNT_DIR/letsencrypt
CERTBOT_DATA=$DATA_MOUNT_DIR/certbot
MYSQL_DATA=$DATA_MOUNT_DIR/mysql
WORDPRESS_DATA=$DATA_MOUNT_DIR/wordpress

mkdir -p $WORDPRESS_INSTALL $LETSENCRYPT_DATA $CERTBOT_DATA $WORDPRESS_DATA $MYSQL_DATA

########################################################################################
# Certbot - Initialise Certbot and Generate TLS Certificates
########################################################################################

cat << EOF > $WORDPRESS_INSTALL/init-certbot.conf
server {
    listen 80;
    server_name $NAMESPACE;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
}
EOF

cat << EOF > $WORDPRESS_INSTALL/docker-compose-init-certbot.yml
version: '3.9'

services:
  certbot:
    container_name: certbot
    image: certbot/certbot:latest
    network_mode: host
    restart: always
    volumes:
      - $LETSENCRYPT_DATA:/etc/letsencrypt
      - $CERTBOT_DATA:/var/www/certbot

  nginx:
    image: nginx:latest
    restart: always
    ports:
      - 80:80
      - 443:443
    volumes:
      - $WORDPRESS_INSTALL/init-certbot.conf:/etc/nginx/conf.d/default.conf:ro
      - $CERTBOT_DATA:/var/www/certbot
      - $LETSENCRYPT_DATA:/etc/letsencrypt
EOF

# Init certificates if they don't exist
if [ ! -d $LETSENCRYPT_DATA/live/$NAMESPACE ]; then
  docker-compose -f $WORDPRESS_INSTALL/docker-compose-init-certbot.yml up -d nginx

  docker-compose -f $WORDPRESS_INSTALL/docker-compose-init-certbot.yml run \
      certbot certonly -n \
      --email ${certbot_email} \
      --agree-tos \
      --webroot -w /var/www/certbot \
      -d $NAMESPACE

  docker-compose -f $WORDPRESS_INSTALL/docker-compose-init-certbot.yml stop nginx
else
  echo "Certs exist for $NAMESPACE. Skipping cert creation"
fi

cat << EOF >> /var/spool/cron/crontabs/root
30 3 * * * docker run --rm -v $CERTBOT_DATA:/var/www/certbot -v $LETSENCRYPT_DATA:/etc/letsencrypt certbot/certbot:latest renew --webroot -w /var/www/certbot
EOF

########################################################################################
# Wordpress config
########################################################################################

# https://ssl-config.mozilla.org/
curl https://ssl-config.mozilla.org/ffdhe2048.txt > $LETSENCRYPT_DATA/ssl-dhparams.pem

cat << EOF > $WORDPRESS_INSTALL/custom-php.ini
post_max_size = 200M
upload_max_filesize = 200M
EOF

cat << EOF > $WORDPRESS_INSTALL/docker-compose.yml
version: '3.9'

services:
  wordpress:
    image: wordpress:6.2-fpm
    restart: always
    environment:

      # WORDPRESS_DB_HOST: "db"
      WORDPRESS_DB_HOST: "${wordpress_db_host}"
      WORDPRESS_DB_USER: "${wordpress_db_user}"
      WORDPRESS_DB_PASSWORD: "${wordpress_db_pass}"
      WORDPRESS_DB_NAME: "${wordpress_db_name}"
      WORDPRESS_DB_CHARSET: "${wordpress_db_charset}"

      WORDPRESS_CONFIG_EXTRA: |
        define('WORDPRESS_INSTALL', 'https://$NAMESPACE');
        define('WP_SITEURL', 'https://$NAMESPACE');

    volumes:
      - $WORDPRESS_DATA:/var/www/html
      - $WORDPRESS_INSTALL/custom-php.ini:/usr/local/etc/php/conf.d/custom-php.ini

  nginx:
    image: nginx:latest
    restart: always
    ports:
      - 80:80
      - 443:443
    volumes:
      - $WORDPRESS_INSTALL/wordpress.conf:/etc/nginx/conf.d/default.conf:ro
      - $WORDPRESS_DATA:/var/www/html
      - $CERTBOT_DATA:/var/www/certbot
      - $LETSENCRYPT_DATA:/etc/letsencrypt

  Use a local database instead of a remote database
  db:
    image: mysql:8-debian
    restart: always
    environment:
      MYSQL_DATABASE: ${wordpress_db_name}
      MYSQL_USER: ${wordpress_db_user}
      MYSQL_PASSWORD: ${wordpress_db_pass}
      MYSQL_RANDOM_ROOT_PASSWORD: '1'
    volumes:
    - $MYSQL_DATA:/var/lib/mysql

EOF

cat << EOF > $WORDPRESS_INSTALL/wordpress.conf
server {
    listen 80;

    server_name $NAMESPACE;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {
        return 302 https://\$host\$request_uri;
    }
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name $NAMESPACE;

    root /var/www/html;
    index index.php;

    location / {
        try_files \$uri \$uri/ /index.php?\$args;
    }

    location ~ \.php$ {
        fastcgi_pass wordpress:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
        fastcgi_param PATH_INFO \$fastcgi_path_info;
    }

    client_max_body_size 200M;

    # https://ssl-config.mozilla.org/
    # intermediate configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    # OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;

    ssl_certificate /etc/letsencrypt/live/$NAMESPACE/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/$NAMESPACE/privkey.pem; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
}
EOF

# Start service
docker-compose -f $WORDPRESS_INSTALL/docker-compose.yml up -d
